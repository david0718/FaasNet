// <auto-generated />
using System;
using FaasNet.EventMesh.Runtime.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FaasNet.EventMesh.Runtime.Website.Migrations
{
    [DbContext(typeof(EventMeshDBContext))]
    [Migration("20220217154943_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.13");

            modelBuilder.Entity("EventMesh.Runtime.Models.BridgeServer", b =>
                {
                    b.Property<string>("Urn")
                        .HasColumnType("TEXT");

                    b.Property<int>("Port")
                        .HasColumnType("INTEGER");

                    b.HasKey("Urn");

                    b.ToTable("BridgeServers");
                });

            modelBuilder.Entity("EventMesh.Runtime.Models.BrokerConfiguration", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Protocol")
                        .HasColumnType("TEXT");

                    b.HasKey("Name");

                    b.ToTable("BrokerConfigurations");
                });

            modelBuilder.Entity("EventMesh.Runtime.Models.BrokerConfigurationRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BrokerConfigurationName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Key")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BrokerConfigurationName");

                    b.ToTable("BrokerConfigurationRecord");
                });

            modelBuilder.Entity("EventMesh.Runtime.Models.Client", b =>
                {
                    b.Property<string>("ClientId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Urn")
                        .HasColumnType("TEXT");

                    b.HasKey("ClientId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("EventMesh.Runtime.Models.ClientSession", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("BufferCloudEvents")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClientId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Environment")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ExpirationDateTime")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("IPAddressData")
                        .HasColumnType("BLOB");

                    b.Property<int>("Pid")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Port")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PurposeCode")
                        .HasColumnType("INTEGER");

                    b.Property<int>("State")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientSession");
                });

            modelBuilder.Entity("EventMesh.Runtime.Models.ClientSessionBridge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClientSessionId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Port")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SessionId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Urn")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClientSessionId");

                    b.ToTable("ClientSessionBridge");
                });

            modelBuilder.Entity("EventMesh.Runtime.Models.ClientSessionHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClientSessionId")
                        .HasColumnType("TEXT");

                    b.Property<int>("State")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClientSessionId");

                    b.ToTable("ClientSessionHistory");
                });

            modelBuilder.Entity("EventMesh.Runtime.Models.ClientSessionPendingCloudEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BrokerName")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClientSessionId")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("EvtPayload")
                        .HasColumnType("BLOB");

                    b.Property<string>("Topic")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClientSessionId");

                    b.ToTable("ClientSessionPendingCloudEvent");
                });

            modelBuilder.Entity("EventMesh.Runtime.Models.Topic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BrokerName")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClientSessionId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClientSessionId");

                    b.ToTable("Topic");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Topic");
                });

            modelBuilder.Entity("EventMesh.Runtime.Models.ClientTopic", b =>
                {
                    b.HasBaseType("EventMesh.Runtime.Models.Topic");

                    b.Property<string>("ClientId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Offset")
                        .HasColumnType("INTEGER");

                    b.HasIndex("ClientId");

                    b.HasDiscriminator().HasValue("ClientTopic");
                });

            modelBuilder.Entity("EventMesh.Runtime.Models.BrokerConfigurationRecord", b =>
                {
                    b.HasOne("EventMesh.Runtime.Models.BrokerConfiguration", null)
                        .WithMany("Records")
                        .HasForeignKey("BrokerConfigurationName")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EventMesh.Runtime.Models.ClientSession", b =>
                {
                    b.HasOne("EventMesh.Runtime.Models.Client", null)
                        .WithMany("Sessions")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EventMesh.Runtime.Models.ClientSessionBridge", b =>
                {
                    b.HasOne("EventMesh.Runtime.Models.ClientSession", null)
                        .WithMany("Bridges")
                        .HasForeignKey("ClientSessionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EventMesh.Runtime.Models.ClientSessionHistory", b =>
                {
                    b.HasOne("EventMesh.Runtime.Models.ClientSession", null)
                        .WithMany("Histories")
                        .HasForeignKey("ClientSessionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EventMesh.Runtime.Models.ClientSessionPendingCloudEvent", b =>
                {
                    b.HasOne("EventMesh.Runtime.Models.ClientSession", null)
                        .WithMany("PendingCloudEvents")
                        .HasForeignKey("ClientSessionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EventMesh.Runtime.Models.Topic", b =>
                {
                    b.HasOne("EventMesh.Runtime.Models.ClientSession", null)
                        .WithMany("Topics")
                        .HasForeignKey("ClientSessionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EventMesh.Runtime.Models.ClientTopic", b =>
                {
                    b.HasOne("EventMesh.Runtime.Models.Client", null)
                        .WithMany("Topics")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EventMesh.Runtime.Models.BrokerConfiguration", b =>
                {
                    b.Navigation("Records");
                });

            modelBuilder.Entity("EventMesh.Runtime.Models.Client", b =>
                {
                    b.Navigation("Sessions");

                    b.Navigation("Topics");
                });

            modelBuilder.Entity("EventMesh.Runtime.Models.ClientSession", b =>
                {
                    b.Navigation("Bridges");

                    b.Navigation("Histories");

                    b.Navigation("PendingCloudEvents");

                    b.Navigation("Topics");
                });
#pragma warning restore 612, 618
        }
    }
}
