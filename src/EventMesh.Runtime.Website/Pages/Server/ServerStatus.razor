@page "/server/status"
@layout ServerLayout
@implements IDisposable
@inject BreadcrumbState ServerState
@inject IOptions<RuntimeOptions> Opts

<!-- Display Server Status -->
<p>
    Server status :
    @if (IsRunning)
    {
        <span class="badge badge-success">Is Running</span>
    }
    else
    {
        <span class="badge badge-danger">Is not running</span>
    }
</p>

<!-- Display Refresh DateTime -->
@if(LastRefreshDateTime == null)
{
    <p>Not been refreshed</p>
}
else
{
    <p>Refresh time : @LastRefreshDateTime?.ToString("HH:mm:s")</p>
}

<!-- Display NumberOfClients -->
<!-- Display NumberOfConfiguredBrokers -->
<!-- Display NumberOfBridges-->

@code {
    private static System.Timers.Timer _timer;
    public bool IsRunning { get; set; } = false;
    public DateTime? LastRefreshDateTime = null;

    protected override Task OnInitializedAsync()
    {
        _timer = new System.Timers.Timer(1000);
        _timer.Elapsed += CheckHeartbeat;
        _timer.Enabled = true;
        _timer.Start();
        ServerState.SetItems(new List<BreadcrumbItem> { new BreadcrumbItem("Server status") });
        return Task.CompletedTask;
    }

    public void Dispose()
    {
        if(_timer != null && _timer.Enabled)
        {
            _timer.Stop();
        }
    }

    private async void CheckHeartbeat(Object source, System.Timers.ElapsedEventArgs e)
    {
        var runtimeClient = new RuntimeClient(Opts.Value.Urn, Opts.Value.Port);
        try
        {
            await runtimeClient.HeartBeat();
            IsRunning = true;
            LastRefreshDateTime = DateTime.UtcNow;
        }
        catch
        {
            IsRunning = false;
            LastRefreshDateTime = DateTime.UtcNow;
        }

        await InvokeAsync(StateHasChanged);
    }
}
